/* program name is lexp.lex */
%{
#include<stdio.h>
#include<stdlib.h>
%}

identifier [a-zA-Z][a-zA-Z0-9]* 
number [0-9]+

%%

int {printf("\n\t%s is a KEYWORD", yytext);}
float {printf("\n\t%s is a KEYWORD", yytext);}
void {printf("\n\t%s is a KEYWORD", yytext);}
char {printf("\n\t%s is a KEYWORD", yytext);}

{identifier} {printf("\n\t%s is an IDENTIFIER", yytext);}
{number} {printf("\n\t%s is a NUMBER", yytext);}

"=" {printf("\n\t%s is an ASSIGNMENT OPERATOR", yytext);}
";" {printf("\n\t%s is a DELIMITER", yytext);}
"(" {printf("\n\t%s is an OPEN PARENTHESIS", yytext);}
")" {printf("\n\t%s is a CLOSE PARENTHESIS", yytext);}
"{" {printf("\n\t%s is an OPEN BRACE", yytext);}
"}" {printf("\n\t%s is a CLOSED BRACE", yytext);}

%%

void main(int argc, char **argv)
{
    FILE *fp;
    if (argc < 2)
    {
        printf("Usage: %s <filename>\n", argv[0]);
        exit(0);
    }
    fp = fopen(argv[1], "r");
    if (fp == NULL)
    {
        printf("Could not open file %s\n", argv[1]);
        exit(0);
    }
    yyin = fp;
    yylex();
    fclose(fp);
}

int yywrap()
{
    return 1;
}

//make a file named test.c
//flex lexp.lex
//gcc lex.yy.c
//./a.out test.c